# Librairies
import pandas as pd
import streamlit as st


# Chargement des donn√©es
def chargement_donnees(path_etablissement, path_centres_dpt):
    """
    Objectif :
        Charger les donn√©es √©tablissements et centres de d√©partement

    Param√®tres :
        path_etablissement : Chemin du fichier d'√©tablissements
        path_centres_dpt : Chemin du fichier de centres de d√©partements

    Sortie :
        etablissements, centres_departements : Fichiers charg√©s
    """

    # Chargement
    etablissements = pd.read_parquet(path_etablissement)
    centres_departements = pd.read_excel(path_centres_dpt)

    # Sortie
    return etablissements, centres_departements


# Aper√ßu des donn√©es
def apercu_donnees(data, nb_lignes):
    """
    Objectif :
        Charger un aper√ßu des donn√©es

    Param√®tres :
        data : Fichier d'√©tablissements
        nb_lignes : Nombre de lignes √† afficher

    Sortie :
        Aper√ßu du fichier
    """

    st.markdown("<hr style='border:2px solid #ff7f0e;'>", unsafe_allow_html=True)
    st.header("üìù Aper√ßu des donn√©es")
    st.dataframe(data.head(nb_lignes))
    st.write(f"Votre table contient {data.shape[0]} lignes et {data.shape[1]} colonnes")


def filtrer_donnees(data):
    """
    Objectif :
        Filtrer les donn√©es en fonction de la cat√©gorie d'√©tablissemnt et de la ville

    Param√®tres :
        data : Fichier √©tablissements

    Sortie :
        data_filtree : Fichier √©tablissements filtr√© sur les cat√©gories d'√©tablissements et sur les villes
    """

    st.markdown("## üéØ Filtrage des donn√©es")

    liste_categories = sorted(list(data["Intitules_NAF_VF"].dropna().unique()))
    choix_categories = st.multiselect(
        "Choisissez une ou plusieurs cat√©gorie(s)", liste_categories
    )

    liste_villes = sorted(list(data["libelleCommuneEtablissement"].dropna().unique()))
    choix_villes = st.multiselect("Choisissez une ou plusieurs ville(s)", liste_villes)

    # Filtre des donn√©es
    data_filtree = data[
        (data["Intitules_NAF_VF"].isin(choix_categories))
        & (data["libelleCommuneEtablissement"].isin(choix_villes))
    ].reset_index(drop=True)

    # Sortie
    return data_filtree


def choix_centre_departement(data, centres_departements):
    """
    Objectif :
        Centr√© la carte sur un d√©partement

    Param√®tres :
        data : Fichier √©tablissements
        centres_departements : Fichier des d√©partements avec leur centre associ√©

    Sortie :
        choix_dep : D√©partement retenu par l'utilisateur
        lat_centre : Latitude centrale du d√©partement retenu par l'utilisateur
        lon_centre : Longitude centrale du d√©partement retenu par l'utilisateur
    """

    # Choix du d√©partement parmi la liste
    liste_deps = sorted(data["nom_dep"].dropna().unique())
    choix_dep = st.selectbox(
        "Choisissez le d√©partement au centre de la carte", liste_deps
    )

    # Filtre sur le choix du d√©partement
    centre = centres_departements[centres_departements["Departement"] == choix_dep]

    # V√©rification que le filtre a renvoy√© des r√©sultats
    if centre.empty:
        #st.error(f"Aucun centre trouv√© pour le d√©partement {choix_dep}. Veuillez v√©rifier les donn√©es.")
        return None, None, None  # Retourner None pour √©viter l'erreur

    # Extraction longitude et latitude
    lat_centre = centre["Latitude_centre"].iloc[0]
    lon_centre = centre["Longitude_centre"].iloc[0]

    # Affichage
    st.success(f"Centr√© sur {choix_dep} (lat: {lat_centre}, lon: {lon_centre})")

    # Sortie
    return choix_dep, lat_centre, lon_centre